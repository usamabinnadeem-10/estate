[{"C:\\Users\\Usama\\Desktop\\Property\\property\\src\\index.js":"1","C:\\Users\\Usama\\Desktop\\Property\\property\\src\\App.js":"2","C:\\Users\\Usama\\Desktop\\Property\\property\\src\\reportWebVitals.js":"3","C:\\Users\\Usama\\Desktop\\Property\\property\\src\\components\\postAd\\Ad.js":"4","C:\\Users\\Usama\\Desktop\\Property\\property\\src\\components\\header\\Header.js":"5","C:\\Users\\Usama\\Desktop\\Property\\property\\src\\components\\map\\Map.js":"6","C:\\Users\\Usama\\Desktop\\Property\\property\\src\\components\\auth\\Login.js":"7","C:\\Users\\Usama\\Desktop\\Property\\property\\src\\components\\auth\\SignUp.js":"8","C:\\Users\\Usama\\Desktop\\Property\\property\\src\\components\\home\\Home.js":"9","C:\\Users\\Usama\\Desktop\\Property\\property\\src\\components\\postAd\\GeneralBox.js":"10","C:\\Users\\Usama\\Desktop\\Property\\property\\src\\components\\postAd\\LocationBox.js":"11","C:\\Users\\Usama\\Desktop\\Property\\property\\src\\components\\postAd\\FeatureBox.js":"12","C:\\Users\\Usama\\Desktop\\Property\\property\\src\\components\\postAd\\Images.js":"13","C:\\Users\\Usama\\Desktop\\Property\\property\\src\\components\\postAd\\SellerInfo.js":"14","C:\\Users\\Usama\\Desktop\\Property\\property\\src\\components\\postAd\\data.js":"15","C:\\Users\\Usama\\Desktop\\Property\\property\\src\\components\\postAd\\mapLogic\\MyGoogleMap.js":"16","C:\\Users\\Usama\\Desktop\\Property\\property\\src\\components\\postAd\\mapLogic\\AutoComplete.js":"17","C:\\Users\\Usama\\Desktop\\Property\\property\\src\\components\\postAd\\mapLogic\\Marker.js":"18","C:\\Users\\Usama\\Desktop\\Property\\property\\src\\components\\mapSearch\\MapSearch.js":"19"},{"size":500,"mtime":499162500000,"results":"20","hashOfConfig":"21"},{"size":2143,"mtime":1609161894285,"results":"22","hashOfConfig":"21"},{"size":362,"mtime":499162500000,"results":"23","hashOfConfig":"21"},{"size":740,"mtime":1609078645553,"results":"24","hashOfConfig":"21"},{"size":862,"mtime":1609058222152,"results":"25","hashOfConfig":"21"},{"size":943,"mtime":1609145117810,"results":"26","hashOfConfig":"21"},{"size":713,"mtime":1609099520376,"results":"27","hashOfConfig":"21"},{"size":1695,"mtime":1609099639485,"results":"28","hashOfConfig":"21"},{"size":322,"mtime":1609100455109,"results":"29","hashOfConfig":"21"},{"size":3646,"mtime":1609073200265,"results":"30","hashOfConfig":"21"},{"size":6331,"mtime":1609072986419,"results":"31","hashOfConfig":"21"},{"size":5066,"mtime":1609081505510,"results":"32","hashOfConfig":"21"},{"size":1211,"mtime":1609078389557,"results":"33","hashOfConfig":"21"},{"size":1484,"mtime":1609081590091,"results":"34","hashOfConfig":"21"},{"size":15467,"mtime":1608986624630,"results":"35","hashOfConfig":"21"},{"size":4685,"mtime":1609067547752,"results":"36","hashOfConfig":"21"},{"size":2138,"mtime":1609058173924,"results":"37","hashOfConfig":"21"},{"size":899,"mtime":1609058177271,"results":"38","hashOfConfig":"21"},{"size":4279,"mtime":1609162032582,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"5qq253",{"filePath":"43","messages":"44","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"74","usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Usama\\Desktop\\Property\\property\\src\\index.js",[],["81","82"],"C:\\Users\\Usama\\Desktop\\Property\\property\\src\\App.js",["83","84","85","86","87"],"C:\\Users\\Usama\\Desktop\\Property\\property\\src\\reportWebVitals.js",[],"C:\\Users\\Usama\\Desktop\\Property\\property\\src\\components\\postAd\\Ad.js",[],"C:\\Users\\Usama\\Desktop\\Property\\property\\src\\components\\header\\Header.js",[],"C:\\Users\\Usama\\Desktop\\Property\\property\\src\\components\\map\\Map.js",[],"C:\\Users\\Usama\\Desktop\\Property\\property\\src\\components\\auth\\Login.js",[],"C:\\Users\\Usama\\Desktop\\Property\\property\\src\\components\\auth\\SignUp.js",[],"C:\\Users\\Usama\\Desktop\\Property\\property\\src\\components\\home\\Home.js",[],"C:\\Users\\Usama\\Desktop\\Property\\property\\src\\components\\postAd\\GeneralBox.js",[],"C:\\Users\\Usama\\Desktop\\Property\\property\\src\\components\\postAd\\LocationBox.js",["88","89"],"import React, {useState} from 'react'\r\nimport {metros} from './data'\r\nimport {cities} from './data'\r\nimport MyGoogleMap from './mapLogic/MyGoogleMap'\r\n\r\nfunction LocationBox() {\r\n    const [current_metro, setCurrent_metro] = useState('')\r\n    const [is_metro_set, setIs_metro_set] = useState(false)\r\n  \r\n    const [current_city_list, setCurrent_city_list] = useState([])\r\n  \r\n    const [current_city, setCurrent_city] = useState('')\r\n    const [is_city_set, setIs_city_set] = useState(false)\r\n\r\n\r\n\r\n    const setMetro = metro =>{\r\n      setCurrent_metro(metro)\r\n      setIs_metro_set(true)\r\n      setIs_city_set(false)\r\n      setCurrent_city('')\r\n  \r\n      if (metro === 'Saint-Petersburg'){\r\n        setCurrent_city_list(cities['Saint_Petersburg'])\r\n      }else if (metro === 'Nizhny Novgorod'){\r\n        setCurrent_city_list(cities['Nizhny_Novgorod'])\r\n      }else if (metro === 'Novosibirsk'){\r\n        setCurrent_city_list(cities['Novosibirsk'])\r\n      }else if (metro === 'Samara'){\r\n        setCurrent_city_list(cities['Samara'])\r\n      }else if (metro === 'Yekaterinburg'){\r\n        setCurrent_city_list(cities['Yekaterinburg'])\r\n      }else if (metro === 'Moscow'){\r\n        setCurrent_city_list(cities['Moscow'])\r\n      }else if (metro === 'Kazan'){\r\n        setCurrent_city_list(cities['Kazan'])\r\n      }\r\n    }\r\n  \r\n    const setCity = city => {\r\n      setCurrent_city(city)\r\n      setIs_city_set(true)\r\n    }\r\n  \r\n    const filterItems = (term) => {\r\n      let list = []\r\n      if (current_metro === 'Saint-Petersburg'){\r\n        list = cities['Saint_Petersburg']\r\n      }else if (current_metro === 'Nizhny Novgorod'){\r\n        list = cities['Nizhny_Novgorod']\r\n      }else if (current_metro === 'Novosibirsk'){\r\n        list = cities['Novosibirsk']\r\n      }else if (current_metro === 'Samara'){\r\n        list = cities['Samara']\r\n      }else if (current_metro === 'Yekaterinburg'){\r\n        list = cities['Yekaterinburg']\r\n      }else if (current_metro === 'Moscow'){\r\n        list = cities['Moscow']\r\n      }else if (current_metro === 'Kazan'){\r\n        list = cities['Kazan']\r\n      }\r\n  \r\n      \r\n      setMetro(current_metro)\r\n      let filtered = list.filter(item => item.toLowerCase().indexOf(term) > -1)\r\n      setCurrent_city_list(filtered)\r\n      \r\n    }\r\n\r\n    return (\r\n        <div className=\"d-flex flex-column card p-2\">\r\n          <h3 className=\"text-muted\" style={{margin : '10px 50px'}}>Location</h3>\r\n          <div className=\"d-flex flex-row flex-wrap justify-content-evenly\">\r\n            <div className=\"main-wrapper d-flex flex-row col-10 col-lg-5\">\r\n              <MyGoogleMap />\r\n            </div>\r\n\r\n            <div className=\"main-wrapper d-flex flex-row col-10 col-lg-5 \">\r\n            <div id=\"banner\" className=\"w-100 bg-dark d-flex flex-column\">\r\n              <div id=\"search\" className=\"d-flex my-3 mx-2 p-2 flex-row flex-wrap\">\r\n\r\n                <div className=\"col-6\">\r\n                  <button \r\n                  className=\"btn btn-outline-primary text-light dropdown-toggle btn-lg\" \r\n                  type=\"button\" \r\n                  data-bs-toggle=\"dropdown\" \r\n                  aria-expanded=\"false\">\r\n                    {\r\n                      is_metro_set ? (current_metro) : 'Metro'\r\n                    }\r\n                  </button>\r\n                  \r\n                  <ul className=\"dropdown-menu\">\r\n                    {\r\n                      metros.map(metro => {\r\n                        return(\r\n                          <li>\r\n                            <a \r\n                          id={metro + '-dropdown'} \r\n                          className=\"dropdown-item\" \r\n                          style={{cursor : 'pointer'}} \r\n                          onClick={() => setMetro( document.getElementById(metro+'-dropdown').text ) }>\r\n                            {metro}</a>\r\n                          </li>\r\n                        )\r\n                      })\r\n                    }\r\n                  </ul>\r\n                </div>\r\n                \r\n                <div className=\"col-6\">\r\n                  <button \r\n                  className=\"btn btn-outline-primary text-light dropdown-toggle btn-lg\" \r\n                  type=\"button\" \r\n                  data-bs-toggle=\"dropdown\" \r\n                  aria-expanded=\"false\">\r\n                    {\r\n                      is_city_set ? (current_city) : 'City'\r\n                    }\r\n                  </button>\r\n                  \r\n                  <ul className=\"dropdown-menu\">\r\n                    <li> \r\n                      <input \r\n                      type=\"text\" \r\n                      onChange={(e)=>filterItems(e.target.value)} \r\n                      placeholder=\"search\"\r\n                      className=\"m-1\">\r\n                      </input> \r\n                    </li>\r\n                    {\r\n                      current_city_list.map(city => {\r\n                        return(\r\n                          <li>\r\n                            <a \r\n                          id={city + '-dropdown'} \r\n                          className=\"dropdown-item\" \r\n                          style={{cursor : 'pointer'}} \r\n                          onClick={() => setCity(document.getElementById(city+'-dropdown').text ) }>\r\n                            {city}</a>\r\n                          </li>\r\n                        )\r\n                      })\r\n                    }\r\n                  </ul>\r\n                </div>\r\n              </div>\r\n\r\n              <div id=\"search\" className=\"d-flex my-3 mx-2 p-2 flex-row flex-wrap justify-content-between\">\r\n                <input  className=\"col-5\" placeholder=\"Price\" type=\"number\"></input>\r\n                <select className=\"col-5 offset-1\" name=\"currency\" id=\"currency\">\r\n                    <option value=\"RUB\">RUB</option>\r\n                    <option value=\"EURO\">EURO</option>\r\n                    <option value=\"USD\">USD</option>\r\n                </select>\r\n              </div>\r\n\r\n              <div id=\"search\" className=\"d-flex my-3 mx-2 p-2 flex-row\">\r\n                  <div className=\"col-6\">\r\n                    <input placeholder=\"total area in m2\" type=\"number\"></input>\r\n                  </div>\r\n              </div>\r\n\r\n            </div>\r\n          </div>\r\n          </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LocationBox\r\n","C:\\Users\\Usama\\Desktop\\Property\\property\\src\\components\\postAd\\FeatureBox.js",[],"C:\\Users\\Usama\\Desktop\\Property\\property\\src\\components\\postAd\\Images.js",[],"C:\\Users\\Usama\\Desktop\\Property\\property\\src\\components\\postAd\\SellerInfo.js",[],"C:\\Users\\Usama\\Desktop\\Property\\property\\src\\components\\postAd\\data.js",[],"C:\\Users\\Usama\\Desktop\\Property\\property\\src\\components\\postAd\\mapLogic\\MyGoogleMap.js",["90","91"],"import React, { Component } from 'react';\r\nimport GoogleMapReact from 'google-map-react';\r\nimport AutoComplete from './AutoComplete';\r\nimport Marker from './Marker';\r\n\r\n\r\nclass MyGoogleMap extends Component {\r\n\r\n\r\n    state = {\r\n        mapApiLoaded: false,\r\n        mapInstance: null,\r\n        mapApi: null,\r\n        geoCoder: null,\r\n        places: [],\r\n        center: [],\r\n        zoom: 9,\r\n        address: '',\r\n        draggable: true,\r\n        lat: null,\r\n        lng: null\r\n    };\r\n\r\n    componentWillMount() {\r\n        this.setCurrentLocation();\r\n    }\r\n\r\n\r\n    onMarkerInteraction = (childKey, childProps, mouse) => {\r\n        this.setState({\r\n            draggable: false,\r\n            lat: mouse.lat,\r\n            lng: mouse.lng\r\n        });\r\n    }\r\n    onMarkerInteractionMouseUp = (childKey, childProps, mouse) => {\r\n        this.setState({ draggable: true });\r\n        this._generateAddress();\r\n    }\r\n\r\n    _onChange = ({ center, zoom }) => {\r\n        this.setState({\r\n            center: center,\r\n            zoom: zoom,\r\n        });\r\n\r\n    }\r\n\r\n    _onClick = (value) => {\r\n        this.setState({\r\n            lat: value.lat,\r\n            lng: value.lng\r\n        });\r\n    }\r\n\r\n    apiHasLoaded = (map, maps) => {\r\n        this.setState({\r\n            mapApiLoaded: true,\r\n            mapInstance: map,\r\n            mapApi: maps,\r\n        });\r\n\r\n        this._generateAddress();\r\n    };\r\n\r\n    addPlace = (place) => {\r\n        this.setState({\r\n            places: [place],\r\n            lat: place.geometry.location.lat(),\r\n            lng: place.geometry.location.lng()\r\n        });\r\n        this._generateAddress()\r\n    };\r\n\r\n    _generateAddress() {\r\n        const {\r\n            mapApi\r\n        } = this.state;\r\n\r\n        const geocoder = new mapApi.Geocoder;\r\n\r\n        geocoder.geocode({ 'location': { lat: this.state.lat, lng: this.state.lng } }, (results, status) => {\r\n            console.log(results);\r\n            console.log(status);\r\n            if (status === 'OK') {\r\n                if (results[0]) {\r\n                    this.zoom = 12;\r\n                    this.setState({ address: results[0].formatted_address });\r\n                } else {\r\n                    window.alert('No results found');\r\n                }\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    // Get Current Location Coordinates\r\n    setCurrentLocation() {\r\n        if ('geolocation' in navigator) {\r\n            navigator.geolocation.getCurrentPosition((position) => {\r\n                this.setState({\r\n                    center: [position.coords.latitude, position.coords.longitude],\r\n                    lat: position.coords.latitude,\r\n                    lng: position.coords.longitude\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            places, mapApiLoaded, mapInstance, mapApi,\r\n        } = this.state;\r\n\r\n\r\n        return (\r\n            <div className=\"col-12\" style={{overflow : 'auto'}}>\r\n                {mapApiLoaded && (\r\n                    <div>\r\n                        <AutoComplete map={mapInstance} mapApi={mapApi} addplace={this.addPlace} />\r\n                    </div>\r\n                )}\r\n                <GoogleMapReact\r\n                    center={this.state.center}\r\n                    zoom={this.state.zoom}\r\n                    draggable={this.state.draggable}\r\n                    onChange={this._onChange}\r\n                    onChildMouseDown={this.onMarkerInteraction}\r\n                    onChildMouseUp={this.onMarkerInteractionMouseUp}\r\n                    onChildMouseMove={this.onMarkerInteraction}\r\n                    onChildClick={() => console.log('child click')}\r\n                    onClick={this._onClick}\r\n                    bootstrapURLKeys={{\r\n                        key: 'AIzaSyDYuHFLdk-1Yw9IfmS2dtogQj1vL4DkO2E',\r\n                        libraries: ['places', 'geometry'],\r\n                    }}\r\n                    yesIWantToUseGoogleMapApiInternals\r\n                    onGoogleApiLoaded={({ map, maps }) => this.apiHasLoaded(map, maps)}\r\n                >\r\n\r\n                    <Marker\r\n                        text={this.state.address}\r\n                        lat={this.state.lat}\r\n                        lng={this.state.lng}\r\n                    />\r\n\r\n\r\n                </GoogleMapReact>\r\n\r\n                <div className=\"info-wrapper\">\r\n                    <div className=\"map-details\">Latitude: <span>{this.state.lat}</span>, Longitude: <span>{this.state.lng}</span></div>\r\n                    <div className=\"map-details\">Zoom: <span>{this.state.zoom}</span></div>\r\n                </div>\r\n\r\n\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nexport default MyGoogleMap;","C:\\Users\\Usama\\Desktop\\Property\\property\\src\\components\\postAd\\mapLogic\\AutoComplete.js",[],"C:\\Users\\Usama\\Desktop\\Property\\property\\src\\components\\postAd\\mapLogic\\Marker.js",[],"C:\\Users\\Usama\\Desktop\\Property\\property\\src\\components\\mapSearch\\MapSearch.js",["92","93","94","95"],{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","severity":1,"message":"101","line":2,"column":16,"nodeType":"102","messageId":"103","endLine":2,"endColumn":24},{"ruleId":"100","severity":1,"message":"104","line":3,"column":8,"nodeType":"102","messageId":"103","endLine":3,"endColumn":10},{"ruleId":"100","severity":1,"message":"105","line":4,"column":8,"nodeType":"102","messageId":"103","endLine":4,"endColumn":11},{"ruleId":"100","severity":1,"message":"106","line":5,"column":8,"nodeType":"102","messageId":"103","endLine":5,"endColumn":13},{"ruleId":"100","severity":1,"message":"107","line":6,"column":8,"nodeType":"102","messageId":"103","endLine":6,"endColumn":14},{"ruleId":"108","severity":1,"message":"109","line":98,"column":29,"nodeType":"110","endLine":102,"endColumn":104},{"ruleId":"108","severity":1,"message":"109","line":135,"column":29,"nodeType":"110","endLine":139,"endColumn":101},{"ruleId":"111","severity":1,"message":"112","line":80,"column":26,"nodeType":"113","messageId":"114","endLine":80,"endColumn":45,"fix":"115"},{"ruleId":"100","severity":1,"message":"116","line":112,"column":13,"nodeType":"102","messageId":"103","endLine":112,"endColumn":19},{"ruleId":"117","severity":1,"message":"118","line":66,"column":39,"nodeType":"119","messageId":"120","endLine":66,"endColumn":41},{"ruleId":"117","severity":1,"message":"118","line":77,"column":47,"nodeType":"119","messageId":"120","endLine":77,"endColumn":49},{"ruleId":"121","severity":1,"message":"122","line":79,"column":49,"nodeType":"110","endLine":79,"endColumn":91},{"ruleId":"121","severity":1,"message":"122","line":83,"column":49,"nodeType":"110","endLine":83,"endColumn":91},"no-native-reassign",["123"],"no-negated-in-lhs",["124"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Ad' is defined but never used.","'Map' is defined but never used.","'Login' is defined but never used.","'SignUp' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"125","text":"126"},"'places' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-global-assign","no-unsafe-negation",[1779,1779],"()"]